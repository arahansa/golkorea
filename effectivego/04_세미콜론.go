

/*
https://code.google.com/p/golang-korea/wiki/EffectiveGo#Semicolons


Semicolons
C언어 처럼 Go언어의 정규화된 문법은 한 문장을 끝내기 위해 세미콜론(;)을 사용합니다. 
하지만 C언어와는 다르게 세미콜론들은 소스코드 상에는 나타나지 않습니다. 
대신 구문분석기(lexer)는 스캔하듯이 자동으로 세미콜론을 넣기 위해 단순한 규칙을 사용합니다. 
그렇기 때문에 코드를 작성하는데 있어 대부분 세미콜론을 사용할 필요가 없습니다.

규칙은 다음과 같습니다. 새로운 라인 앞에 마지막 token이 구분자(int또는 float64, 숫자 또는 문자상수 
또는 token의 하나와 같은 기본적인 문자를 포함해서)가 됩니다.

break continue fallthrough return ++ -- ) }
구문분석기(lexer)는 항상 token뒤에 세미콜론을 추가합니다. 
이것은 "만약 새로운 라인이 어떤 token뒤에 온다면 문장의 끝을 의미하며 
세미콜론을 추가해라"라고 축약해서 말하는 것과 같습니다.

또한, 세미콜론은 중괄호({}) 앞인 경우는 생략될 수 있습니다. 
아래 예에서 보는 것과 같이 세미콜론이 필요하지 않습니다.
*/

    go func() { for { dst <- <-src } }()
/*
Go언어의 문법에서는 오직 for 루프문에서만 초기화와 condition, continuation 요소를 구분하기 위해 
세미콜론을 사용합니다. 또한 한 라인에서 여러개의 문장을 구분하기 위해서는 세미콜론을 사용합니다.

한가지 주의할 점은, 제어문(if, for, switch, select)에서 제어문 다음 라인에 중괄호({)를 사용하면 
안된다는 것 입니다. 만약 그렇게 하면 제어문의 중괄호({) 앞에 
세미콜론이 추가될 것이며 예상하지 못한 결과를 가져오게 될 것 입니다.

예로 아래와 같이 사용하십시요.
*/
if i < f() {
    g()
}
/*다음과 같이 사용하면 안됩니다.*/

if i < f()  // wrong! (<-- lexer는 이부분에 세미콜론을 추가하게 될 것입니다.)
{           // wrong!
    g()
}

