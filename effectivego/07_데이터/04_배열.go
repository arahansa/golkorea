/*

원글 링크 : https://code.google.com/p/golang-korea/wiki/EffectiveGo


배열(Arrays)
배열은 메모리의 자세한 레이아웃을 설계할 때 유용하며, 때로는, 메모리 할당하는 것을 피할 수 있습니다. 
하지만 주로 배열은 다음 섹션의 주제인 slice를 위한 하나의 덩어리 입니다. 
주제에 대한 기초를 쌓기 위해, 여기서 배열에 관해 몇마디 하자면, 
Go 언어와 C언어 사이에는 큰 차이 점이 있습니다. Go 언어에서는 배열은 값들입니다. 

모든 요소들의 또다른 복사본을 위해 하나의 배열을 지정하는 것, 
특히, 만약 함수에 배열을 넘긴다면, 함수는 실제 배열에 대한 포인터가 아니라 배열의 복사본을 넘겨 받게 될 것입니다. 
배열의 크기는 배열의 타입의 한 부분입니다. 10?int 와 20?int는 구별되어지며, 값 속성은 유용하지만 사용이 힘듭니다.; 
만약 C언어에서와 같은 형태의 사용이나 효율성을 원한다면 다음 예제와 같이 배열에 포인터를 넘겨줄 수도 있습니다.

*/

func Sum(a *[3]float64) (sum float64) {
    for _, v := range *a {
        sum += v
    }
    return
}

array := [...]float64{7.0, 8.5, 9.1}
x := Sum(&array)  // Note the explicit address-of operator

//하지만 이런 형태는 자연스러운 Go언어의 형태가 아닙니다.